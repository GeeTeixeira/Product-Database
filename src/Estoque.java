
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.util.ArrayList;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author guilhermeteixeira
 */
public class Estoque extends javax.swing.JFrame implements Serializable {
    public static DecimalFormatSymbols symbols = new DecimalFormatSymbols();
    public static DecimalFormat format = new DecimalFormat("0.#");
    
    /**
     * Creates new form mainScreen
     */
    public Estoque() {
        initComponents();
        MSGTextField.setText(String.valueOf(totalPacotes));
        if(allFinances.size() == 0){
            finances f = new finances();
            finances.atual newFinance = f.new atual();
            allFinances.add(newFinance);
        }
        reCalculateTotalProd();
    }
    public static void reCalculateTotalProd(){
        float tempTotal = 0.0f;
        produtos.list_produtos temp;
        for(produtos.produto p : allProdArray){
            tempTotal += (p.quantidade*p.valor.valor_final);
        }
        allFinances.get(allFinances.size()-1).valorProdutos = tempTotal;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        stockBtn = new javax.swing.JButton();
        financeiroBtn = new javax.swing.JButton();
        remessaBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        MSGTextField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Opções");

        stockBtn.setText("Abrir Estoque");
        stockBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stockBtnActionPerformed(evt);
            }
        });

        financeiroBtn.setText("Abrir Finanças");
        financeiroBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                financeiroBtnActionPerformed(evt);
            }
        });

        remessaBtn.setText("Criar Pacote");
        remessaBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        remessaBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                remessaBtnActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel1.setText("Opções");

        MSGTextField.setEditable(false);
        MSGTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MSGTextFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(financeiroBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(remessaBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(stockBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(24, 24, 24))
            .addGroup(layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(jLabel1)
                .addGap(60, 60, 60))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(MSGTextField)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(10, 10, 10)
                .addComponent(stockBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(financeiroBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(remessaBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(MSGTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void stockBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stockBtnActionPerformed
        // TODO add your handling code here:
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new main().setVisible(true);
            }
        });
    }//GEN-LAST:event_stockBtnActionPerformed

    private void financeiroBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_financeiroBtnActionPerformed
        // TODO add your handling code here:
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new financeiro().setVisible(true);
            }
        });
    }//GEN-LAST:event_financeiroBtnActionPerformed

    private void remessaBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_remessaBtnActionPerformed
        // TODO add your handling code here:
        //produtos.remessa rem = new produtos.remessa(remessaInfo.date,remessaInfo.transp);
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new remessaInfo().setVisible(true);
            }
        });
    }//GEN-LAST:event_remessaBtnActionPerformed

    private void MSGTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MSGTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MSGTextFieldActionPerformed
    

    /**
     * @param args the command line arguments
     */
    
    
    
    public static int totalPacotes = getTotalPacote(); // int with how many packages there are generated
    public static ArrayList<produtos.produto> allProdArray = getProdArray(); // all products registered in stock loose records
    public static ArrayList<produtos.produto> allVendas = getVendas(); // sold products
    public static ArrayList<produtos.remessa> pacotes = getPacotes(); // all products registers in stock by packages
    public static ArrayList<finances.atual> allFinances = getFinances(); // mes atual de finances
    

    public static ArrayList<finances.atual> getFinances(){
        ArrayList<finances.atual> finance = new ArrayList<>();
        try {
            ObjectInputStream objInput = new ObjectInputStream(new FileInputStream("financeiro.ser"));
            Object obj = objInput.readObject();
            finance = (ArrayList<finances.atual>) obj;
            objInput.close();
        }
        catch(Exception e){
            System.out.println("Error reading in.");
            System.out.println(e);
            finances f = new finances();
            finances.atual temp = f.new atual();
            finance.add(temp);
            return finance;
        }
        
        return finance;
    }
    public static void writeFinances(ArrayList<finances.atual> pacotes){
        try {
            ObjectOutputStream objOutput = new ObjectOutputStream(new FileOutputStream("financeiro.ser"));
//          
            objOutput.writeObject(pacotes);
            objOutput.close();
        }
        catch(Exception e){
            System.out.println("Error writing out.");
            System.out.println(e);
            e.printStackTrace();
        }
    }
    
    public static ArrayList<produtos.remessa> getPacotes(){
        ArrayList<produtos.remessa> remessas = new ArrayList<produtos.remessa>();
        try {
            ObjectInputStream objInput = new ObjectInputStream(new FileInputStream("infoPacotes.ser"));
            Object obj = objInput.readObject();
            remessas = (ArrayList<produtos.remessa>) obj;
            objInput.close();
        }
        catch(Exception e){
            System.out.println("Error reading in.");
            System.out.println(e);
            return remessas;
        }
        
        return remessas;
    }
    public static void writeRemessas(ArrayList<produtos.remessa> pacotes){
        try {
            ObjectOutputStream objOutput = new ObjectOutputStream(new FileOutputStream("infoPacotes.ser"));
//          
            objOutput.writeObject(pacotes);
            objOutput.close();
        }
        catch(Exception e){
            System.out.println("Error writing out.");
            System.out.println(e);
            e.printStackTrace();
        }
    }
    
    public static int getTotalPacote(){
        int rem = 0;
        try {
            ObjectInputStream objInput = new ObjectInputStream(new FileInputStream("totalPacotes.ser"));
            Object obj = objInput.readObject();
            rem = (int) obj;
            objInput.close();
        }
        catch(Exception e){
            System.out.println("Error reading in.");
            System.out.println(e);
            return rem;
        }
        
        return rem;
    }
    public static void writeTotalPacotes(int totalPacote){
        try {
            ObjectOutputStream objOutput = new ObjectOutputStream(new FileOutputStream("totalPacotes.ser"));
//          
            objOutput.writeObject(totalPacote);
            objOutput.close();
        }
        catch(Exception e){
            System.out.println("Error writing out.");
            System.out.println(e);
            e.printStackTrace();
        }
    }
    
    public static void writeProdArray(ArrayList<produtos.produto> allProdArray){
        try {
            ObjectOutputStream objOutput = new ObjectOutputStream(new FileOutputStream("todosProdArray.ser"));
//          
            objOutput.writeObject(allProdArray);
            objOutput.close();
        }
        catch(Exception e){
            System.out.println("Error writing out.");
            System.out.println(e);
            e.printStackTrace();
        }
    }
    public static ArrayList<produtos.produto> getProdArray(){
        ArrayList<produtos.produto> allProd = new ArrayList<>();
        try {
            ObjectInputStream objInput = new ObjectInputStream(new FileInputStream("todosProdArray.ser"));
            Object obj = objInput.readObject();
            allProd = (ArrayList<produtos.produto>) obj;
            objInput.close();
        }
        catch(Exception e){
            System.out.println("Error reading in.");
            System.out.println(e);
        }
        
        return allProd;
    }
    
    public static void writeVendas(ArrayList<produtos.produto> allProdArray){
        try {
            ObjectOutputStream objOutput = new ObjectOutputStream(new FileOutputStream("todasVendas.ser"));
//          
            objOutput.writeObject(allProdArray);
            objOutput.close();
        }
        catch(Exception e){
            System.out.println("Error writing out.");
            System.out.println(e);
            e.printStackTrace();
        }
    }
    public static ArrayList<produtos.produto> getVendas(){
        ArrayList<produtos.produto> allProd = new ArrayList<>();
        try {
            ObjectInputStream objInput = new ObjectInputStream(new FileInputStream("todasVendas.ser"));
            Object obj = objInput.readObject();
            allProd = (ArrayList<produtos.produto>) obj;
            objInput.close();
        }
        catch(Exception e){
            System.out.println("Error reading in.");
            System.out.println(e);
        }
        
        return allProd;
    }
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
       try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Estoque.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Estoque.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Estoque.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Estoque.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Estoque().setVisible(true);
            }
        });
        Runtime.getRuntime().addShutdownHook(new Thread(new Runnable() {
        public void run() {
            writeTotalPacotes(totalPacotes);
            writeProdArray(allProdArray);
            writeVendas(allVendas);
            writeRemessas(pacotes);
            writeFinances(allFinances);
        }
    }, "Shutdown-thread"));
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JTextField MSGTextField;
    private javax.swing.JButton financeiroBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton remessaBtn;
    private javax.swing.JButton stockBtn;
    // End of variables declaration//GEN-END:variables
}
